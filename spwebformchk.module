<?php

/**
 * Implements hook_form_alter
 * Roept voor ieder webform-formulier en ieder webform-configure-formulier de betreffende functies aan.
 */
function spwebformchk_form_alter(&$form, &$form_state, $form_id) {

	if (substr($form_id, 0, 19) == 'webform_client_form') {
		return _spwebformchk_client_form_alter($form, $form_state);
	} elseif ($form_id == 'webform_configure_form') {
		return _spwebformchk_configure_form_alter($form, $form_state);
	}

	return true;
}

/* Aanpassingen aan webforms. Voert afhankelijk van de instellingen een ajax-callback uit voor de postcodelookup en voor een simpele check op dubbele records in CiviCRM. */
function _spwebformchk_client_form_alter(&$form, &$form_state) {

	$setting_postcode = variable_get('spwebform_postcode_' . $form['#node']->nid);
	$setting_doubles = variable_get('spwebform_doubles_' . $form['#node']->nid);

	if ($setting_postcode || $setting_doubles) {

		$api = _spwebformchk_civicrm_api();

		// Ajax callback
		$ajaxCallback = array(
			'wrapper'  => 'spwebform_contact_fieldset',
			'callback' => 'spwebformchk_ajax_callback',
			'progress' => 'none',
		);

		$contact = &$form['submitted']['civicrm_1_contact_1_fieldset_fieldset'];
		$contactValues = &$form_state['values']['submitted']['civicrm_1_contact_1_fieldset_fieldset'];
		$contact['#attributes'] = array('id' => 'spwebform_contact_fieldset');

		// Set postcode callback for country / postal code / house number fields
		$contact['civicrm_1_contact_1_address_country_id']['#ajax'] = $ajaxCallback;
		$contact['civicrm_1_contact_1_address_postal_code']['#ajax'] = $ajaxCallback;
		$contact['civicrm_1_contact_1_address_spwebform_housenumber']['#ajax'] = $ajaxCallback;

		// Set doubles callback for address + email
		if ($setting_doubles) {
			$contact['civicrm_1_contact_1_email_email']['#ajax'] = $ajaxCallback;
		}
	}

	if ($setting_postcode) {

		// Set value for house number and street fields from CiviCRM data for currently logged in contact
		if (array_key_exists('civicrm_1_contact_1_contact_existing', $contact) && $contact['civicrm_1_contact_1_contact_existing']['#type'] == 'hidden') {

			global $user;
			$api->UFMatch->Getsingle(array('uf_id' => $user->uid));
			$contact_uf = $api->result();
			if (!$contact_uf)
				throw new \Exception('Could not find CiviCRM contact with Drupal uid ' . $user->uid . '.');

			$api->Address->Getsingle(array(
				'contact_id' => wf_crm_user_cid(),
				'is_primary' => 1,
			));
			$addressData = $api->result();
			if (!$addressData || $addressData->is_error)
				throw new \Exception('Error fetching address data for contact id ' . $contact_uf->contact_id . '.');

			$contact['civicrm_1_contact_1_address_spwebform_housenumber']['#default_value'] = $addressData->street_number;
			$contact['civicrm_1_contact_1_address_spwebform_housenumber_suffix']['#default_value'] = $addressData->street_unit;
			$contact['civicrm_1_contact_1_address_spwebform_street']['#default_value'] = $addressData->street_name;
		}

		// Perform postcodedatabase lookup
		$countryId = $contactValues['civicrm_1_contact_1_address_country_id'] ? $contactValues['civicrm_1_contact_1_address_country_id'] : $contact['civicrm_1_contact_1_address_country_id']['#default_value'];

		if ($countryId == 1152) {
			$disabled = true;

			$zipcode = $contactValues['civicrm_1_contact_1_address_postal_code'];
			$housenumber = $contactValues['civicrm_1_contact_1_address_spwebform_housenumber'];
			if ($zipcode && $housenumber) {

				$lookup = _spwebformchk_postcode_lookup($zipcode, $housenumber);
				if ($lookup) {
					$city = $lookup->woonplaats;
					$street = $lookup->adres;
					$contact['civicrm_1_contact_1_address_spwebform_pcdescription']['#markup'] = 'Uw straat- en plaatsnaam zijn automatisch ingevuld.';
				} else {
					$city = '';
					$street = '';
					$contact['civicrm_1_contact_1_address_spwebform_pcdescription']['#markup'] = 'Uw straat- en plaatsnaam konden niet worden gevonden. Controleer uw invoer.';
				}
			} else {
				$city = '';
				$street = '';
				$contact['civicrm_1_contact_1_address_spwebform_pcdescription']['#markup'] = 'Uw straat- en plaatsnaam worden automatisch ingevuld.';
			}

			// Set street/city fields
			if ($city || $street) {
				$contact['civicrm_1_contact_1_address_city']['#value'] = $city;
				$contact['civicrm_1_contact_1_address_spwebform_street']['#value'] = $street;
			}

		} else {
			$disabled = false;
			$contact['civicrm_1_contact_1_address_spwebform_pcdescription']['#markup'] = 'Voor adressen buiten Nederland moet u zelf de straat- en plaatsnaam invullen.';
		}

		// Enable / disable street fields
		$contact['civicrm_1_contact_1_address_spwebform_street']['#disabled'] = $disabled;
		$contact['civicrm_1_contact_1_address_city']['#disabled'] = $disabled;
	}

	if ($setting_doubles) {

		// Checken op dubbelen op basis van postcode/huisnummer
		if (!empty($contactValues['civicrm_1_contact_1_address_postal_code']) && !empty($contactValues['civicrm_1_contact_1_address_spwebform_housenumber'])) {
			$api->Address->Get(array(
				'postal_code' => $contactValues['civicrm_1_contact_1_address_postal_code'],
				'housenumber' => $contactValues['civicrm_1_contact_1_address_spwebform_housenumber'],
			));
			$addressCheck = $api->result();
			if ($addressCheck && $addressCheck->count > 0) {
				$retMsg = array();
				foreach ($addressCheck->values as $record) {
					$api->Contact->Getsingle(array(
						'contact_id' => $record->contact_id,
					));
					$contactChk = $api->result();
					if ($contactChk && !$contactChk->is_error)
						$retMsg[] = '<a href="/civicrm/contact/view/?cid=' . $contactChk->contact_id . '">' . $contactChk->contact_id . ' ' . $contactChk->display_name . '</a>';
				}

				drupal_set_message('Let op, ' .
					(count($retMsg) == 1 ? 'er bestaat al een contact' : 'er bestaan al ' . count($retMsg) . ' contacten') .
					' op dit adres: ' . implode(', ', $retMsg) . '. CiviCRM zal deze mogelijk samenvoegen.',
					'warning');
			}
		}

		// Checken op dubbelen op basis van emailadres
		if (!empty($contactValues['civicrm_1_contact_1_email_email'])) {
			$api->Email->Get(array(
				'email' => $contactValues['civicrm_1_contact_1_email_email'],
			));
			$emailCheck = $api->result();
			if ($emailCheck && $emailCheck->count > 0) {

				$retMsg = array();
				foreach ($emailCheck->values as $record) {
					$api->Contact->Getsingle(array(
						'contact_id' => $record->contact_id,
					));
					$contactChk = $api->result();
					if ($contactChk && !$contactChk->is_error)
						$retMsg[] = '<a href="/civicrm/contact/view/?cid=' . $contactChk->contact_id . '">' . $contactChk->contact_id . ' ' . $contactChk->display_name . '</a>';
				}

				drupal_set_message('Let op, ' .
					(count($retMsg) == 1 ? 'er bestaat al een contact' : 'er bestaan al ' . count($retMsg) . ' contacten') .
					' met dit emailadres: ' . implode(', ', $retMsg) . '. CiviCRM zal deze mogelijk samenvoegen.',
					'warning');
			}
		}

	}

	return true;
}

/* Voorafgaand aan webform opslaan: postcode-lookup verwerken */
function spwebformchk_webform_submission_presave($node, &$submission) {

	$setting_postcode = variable_get('spwebform_postcode_' . $node->nid);

	if ($setting_postcode) {

		// Save street address + house number to default CiviCRM address field

		$components = array();
		foreach ($node->webform['components'] as $key => $component) {
			switch ($component['form_key']) {
				case 'civicrm_1_contact_1_address_spwebform_street':
					$components['street'] = $component['cid'];
					break;
				case 'civicrm_1_contact_1_address_spwebform_housenumber':
					$components['housenumber'] = $component['cid'];
					break;
				case 'civicrm_1_contact_1_address_spwebform_housenumber_suffix':
					$components['suffix'] = $component['cid'];
					break;
				case 'civicrm_1_contact_1_address_street_address':
					$components['destination'] = $component['cid'];
					break;
			}
		}

		$submission->data[$components['destination']] = array(
			'0' => $submission->data[$components['street']][0] . ' ' . $submission->data[$components['housenumber']][0] . ($submission->data[$components['suffix']][0] ? '-' . $submission->data[$components['suffix']][0] : ''),
		);

	}
}

/* Verzenden van webform. -> Gebeurt nu niets meer, niet-werkende mandate support hier verwijderd. */
function spwebformchk_webform_submission_insert($node, $submission) {

}

/* Ajax callback: checkt op dubbelen, verwerkt postcodelookup */
function spwebformchk_ajax_callback($form, &$form_state) {
	return $form['submitted']['civicrm_1_contact_1_fieldset_fieldset'];
}

/* Aanpassingen aan webform-configuratiescherm */
function _spwebformchk_configure_form_alter(&$form, &$form_state) {

	$setting_doubles = variable_get('spwebform_doubles_' . $form['#node']->nid);
	$setting_postcode = variable_get('spwebform_postcode_' . $form['#node']->nid);

	$form['spwebform'] = array(
		'#type'        => 'fieldset',
		'#title'       => t('SP Webform-opties'),
		'#collapsible' => true,
		'#collapsed'   => true,
		'#weight'      => 20,
	);

	$form['spwebform']['spwebform_description'] = array(
		'#type'   => 'markup',
		'#markup' => 'Let op: deze opties zijn alleen geldig voor een CiviCRM-formulier dat een contact en/of lidmaatschap toevoegt, en kunnen elders leiden tot errors.',
	);
	$form['spwebform']['spwebform_doubles'] = array(
		'#type'          => 'checkbox',
		'#title'         => 'SP-webform: check op dubbelingen uitvoeren',
		'#default_value' => $setting_doubles,
		'#description'   => 'Controleer op dubbelingen op basis van postcode/huisnummer en e-mailadres. Op dit moment wordt alleen een CiviCRM-webform met één contact ondersteund.',
		'#access'        => 1,
	);
	$form['spwebform']['spwebform_postcode'] = array(
		'#type'          => 'checkbox',
		'#title'         => 'SP-webform: postcodecheck uitvoeren',
		'#default_value' => $setting_postcode,
		'#description'   => 'Vul straatnaam en woonplaats automatisch in op basis van postcode en huisnummer.',
		'#access'        => 1,
	);

	$form['#submit'][] = '_spwebformchk_configure_form_submit';

	return true;
}

/* Aanpassingen aan webform-configuratiescherm */
function _spwebformchk_configure_form_submit(&$form, &$form_state) {

	// Instellingen opslaan
	$setting_doubles = $form_state['values']['spwebform_doubles'];
	$setting_postcode = $form_state['values']['spwebform_postcode'];

	variable_set('spwebform_doubles_' . $form['#node']->nid, $setting_doubles);
	variable_set('spwebform_postcode_' . $form['#node']->nid, $setting_postcode);

	// Probeer automatisch postcodevelden toe te voegen (velden voor andere opties zijn CiviCRM-standaard)
	if ($setting_postcode) {

		$node = node_load($form_state['values']['nid']);

		$webform_existing_fields = array();
		foreach ($node->webform['components'] as $key => $component) {
			$webform_existing_fields[(string) $key] = $component['form_key'];
		}

		if (!in_array('civicrm_1_contact_1_address_spwebform_housenumber', $webform_existing_fields)) {
			$node->webform['components'][] = array(
				'name'      => 'Huisnummer',
				'form_key'  => 'civicrm_1_contact_1_address_spwebform_housenumber',
				'type'      => 'textfield',
				'mandatory' => 1,
				'pid'       => 1,
				'weight'    => 0,
			);
		}

		if (!in_array('civicrm_1_contact_1_address_spwebform_housenumber_suffix', $webform_existing_fields)) {
			$node->webform['components'][] = array(
				'name'      => 'Huisnummer toevoeging',
				'form_key'  => 'civicrm_1_contact_1_address_spwebform_housenumber_suffix',
				'type'      => 'textfield',
				'mandatory' => 1,
				'pid'       => 1,
				'weight'    => 0,
			);
		}

		if (!in_array('civicrm_1_contact_1_address_spwebform_pcdescription', $webform_existing_fields)) {
			$node->webform['components'][] = array(
				'name'     => 'Postcodemelding',
				'form_key' => 'civicrm_1_contact_1_address_spwebform_pcdescription',
				'type'     => 'markup',
				'pid'      => 1,
				'weight'   => 0,
			);
		}

		if (!in_array('civicrm_1_contact_1_address_spwebform_street', $webform_existing_fields)) {
			$node->webform['components'][] = array(
				'name'     => 'Straat',
				'form_key' => 'civicrm_1_contact_1_address_spwebform_street',
				'type'     => 'textfield',
				'pid'      => 1,
				'weight'   => 0,
			);
		}

		$street_address = array_search('civicrm_1_contact_1_address_street_address', $node->webform['components']);
		if ($street_address) {
			$node->webform['components'][$street_address]['type'] = 'hidden';
		}

		node_save($node);
	}

	return true;
}

/* Helper-functie om de API te initialiseren en een API-class te retourneren */
function _spwebformchk_civicrm_api() {
	civicrm_initialize();
	require_once 'api/class.api.php';

	return new civicrm_api3;
}

/**
 * Postcode-lookup via CiviCRM API
 * @param $postcode Postcode
 * @param $huisnummer Huisnummer
 * @return array|mixed Resultaat
 */
function _spwebformchk_postcode_lookup($postcode, $huisnummer) {

	$api = _spwebformchk_civicrm_api();
	$api->PostcodeNL->get(array(
		'postcode'   => $postcode,
		'huisnummer' => $huisnummer,
	));
	$res = $api->result();

	if ($res && !$res->is_error && count($res->values) > 0) {
		return array_shift($res->values);
	}

	return array();
}
